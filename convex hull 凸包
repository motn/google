凸包（Convex Hull）是一个计算几何（图形学）中的概念。点集Q的凸包（convex hull）是指一个最小凸多边形，
满足Q中的点或者在多边形边上或者在其内(也就是说：平面上有n个点p1,p2, ..., pn, 要求求出一个面积最小的
凸多边形，使得这个多边形包含所有平面上的点。) 关于凸包求解，主要有两种算法：
 1) Graham scan(Graham扫描法)，时间复杂度O(nlogn)
 2) Gift wrapping (Jarvis march，Jarvis步进法)，时间复杂度O(nh)
最常用的是Graham scan方法，主要步骤如下：）
 GRAHAM-SCAN(Q)  { // 伪代码
     1. 取出所有点中y坐标最小的点作为初始点p0  
     2. 之后对于所有其他点，以p0为中心，点集中的所有点按关于p0的极角逆时针排序,形成p1,p2,..pn-1  
     3. push(p0,Stack)   
     4. push(p1,Stack)  
     5. push(P2,Stack)  
     for(Point i: 3->n-1)  {       
           px = nexttoTop(Stack)  
           py = Top(Stack)   
           do while (如果(py->pi向量)相对于(px->py向量)是向右走的)  
                     pop(Stack)  
                     px = nextotTop(Stack)  
                     py = Top(Stack)  
           push(pi, Stack);  
     }  
     return Stack; //最后Stack栈中保存了所有凸多边形smallest convex polygon的顶点集合
}  

首先介绍一下二维向量的叉积（cross product): 
 1) 向量一：p0->p1 (=a)
 2) 向量二：p0->p2 (=b)
 3) 叉积 cross product (a,b) = (x1-x0)*(y2-y0) - (x2-x0)*(y1-y0) 
     几何意义就是|a||b|sin<a,b>。
     如果a与b夹角小于180度（逆时针），那么这个值就是正值(此时p0p2在p0p1左边),大于180度就是负值。
 4) 由此可以给p1...pn-1排序：基准点p0为起点，对其他点进行夹角从小到大排序，
    如果夹角相等，则距离近的排前面。计算夹角，可以使用叉积来判断（如上所述，计算方便，乘法没精度损失），也可以使用余弦
其次，根据左转或者右转判断当前点是否在凸包上。使用栈，判断s[top] s[top] v[i]情况, 
   叉积为正则左转，在凸包上；叉积为负则右转，不在凸包上；叉积为零，根据具体情况，考虑是否保留。
   当不在凸包上时，需要循环弹出栈，直到满足左转。
   

-------------------------------------------------下面代码-------------------------------
package 其它算法;

//This is a java program to implement Graham Scan Algorithm
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;
import java.util.Stack;

class Point2D
{
//  public static final Comparator<Point2D> R_ORDER = new ROrder();
//  public final Comparator<Point2D> POLAR_ORDER = new PolarOrder();

  private final double x; // x coordinate
  private final double y; // y coordinate
  public final Comparator<Point2D> Cmp = new Cmp();

  public Point2D(double x, double y)  {
      if (Double.isInfinite(x) || Double.isInfinite(y))
          throw new IllegalArgumentException("Coordinates must be finite");
      if (Double.isNaN(x) || Double.isNaN(y))
          throw new IllegalArgumentException("Coordinates cannot be NaN");
      if (x == 0.0)  x = 0.0; // convert -0.0 to +0.0
      if (y == 0.0)  y = 0.0; // convert -0.0 to +0.0
      this.x = x;
      this.y = y;
  }

  public double x() { return x; }
  public double y() { return y; }

  //行列式
  public static double det(double x1, double y1, double x2, double y2) {
  	return x1 * y2 - x2 * y1;
  }
  // 向量叉积 P0P1 X P0P2，判断极角大小
  public double crossProduct(Point2D p1, Point2D p2) {//det(x1-x0,y1-y0,x2-x0,y2-y0)
  	return det(p1.x - this.x, p1.y - this.y, p2.x - this.x, p2.y - this.y);
  } // = (x1-x0)*(y2-y0)-(x2-x0)*(y1-y0)
  // 向量叉积 P0P1 X P0P2，判断极角大小
  public static double crossProduct(Point2D p1, Point2D p2, Point2D p3, Point2D p4) {//做stack扫描用
  	return det(p2.x - p1.x, p2.y - p1.y, p4.x - p3.x, p4.y - p3.y);
  } // = (x1-x0)*(y2-y0)-(x2-x0)*(y1-y0)
  // 两点间距离
  public double dist(Point2D p) {
  	return (this.x - p.x)*(this.x - p.x) + (this.y - p.y)*(this.y - p.y);
  }
  // 根据叉积排序：CP(p1,p2,p0)>0,则p0p2在p0p1左边，p2排在p1后面，==0，但|p0p2|>|p0p1|，也一样。反之，p2在p1前面
  public int cmp(Point2D p1, Point2D p2) {//排序判断条件
  	if (crossProduct(p1, p2) > 0)  		
  	   return 1;
  	else if (crossProduct(p1, p2) == 0 && dist(p1) < dist(p2))
  		 return 1;
  	else
  		return -1;
  }
  

  private class Cmp implements Comparator<Point2D> {
	  public int compare(Point2D p1, Point2D p2) {
		  return -cmp(p1, p2);
	  }
  }
}
  
public class ConvexHullGraham {
  private Stack<Point2D> hull = new Stack<Point2D>();//可以用Deque代替stack
  Point2D[] pts;
  int size;
  Point2D base;
  
  // constructor
  public ConvexHullGraham(Point2D[] pts)
  {
      // defensive copy
      this.size = pts.length;
      this.pts = new Point2D[size];
      for (int i = 0; i < size; i++)
          this.pts[i] = pts[i];
      
      // get base point whose y-coordinae is lowest and let it be pts[0]
      double y = pts[0].y();
      int baseIdx = 0;
      for(int i = 1; i < size; i++) {
    	  if(pts[i].y() < y) {
    		  y = pts[i].y();
    		  baseIdx = i;
    	  }
      }
      Point2D tmp = pts[0];
      pts[0] = pts[baseIdx];
      pts[baseIdx] = tmp;
      this.base = pts[0]; //base point
      
      
      Arrays.sort(pts, 1, size, pts[0].Cmp);
      
      for (int i = 0; i < 2; ++i)
    	  hull.push(pts[i]);    
    	
      for (int i = 2; i < size; i++)
      {	
    	  Point2D top = hull.pop();
    	  while(top != null && !hull.isEmpty() && 
    		    Point2D.crossProduct(hull.peek(), top, top, pts[i]) <= 0) {
    		  top = hull.pop();
    	  }
    	  hull.push(top);
    	  hull.push(pts[i]);
      }   
  }
  
  public static void main(String[] args)
  {
      System.out.println("Graham Scan Test");
      Scanner sc = new Scanner(System.in);
      System.out.println("Enter the number of points");
      int N = sc.nextInt();

      Point2D[] points = new Point2D[N];
      System.out.println("Enter the coordinates of each points: <x> <y>");
      for (int i = 0; i < N; i++)
      {
          int x = sc.nextInt();
          int y = sc.nextInt();
          points[i] = new Point2D(x, y);
      }
      ConvexHullGraham graham = new ConvexHullGraham(points);
      System.out.println("The convex hull consists of following points: ");
      for (Point2D p : graham.hull)
          System.out.println(p.x() + " ： " + p.y());

      sc.close();
  }

}



------------------------下面是另一种不错的代码--------------------------------

//This is a java program to implement Graham Scan Algorithm
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;
import java.util.Stack;
 
class Point2D implements Comparable<Point2D>
{
    public static final Comparator<Point2D> X_ORDER = new XOrder();
    public static final Comparator<Point2D> Y_ORDER = new YOrder();
    public static final Comparator<Point2D> R_ORDER = new ROrder();
    public final Comparator<Point2D> POLAR_ORDER = new PolarOrder();
    public final Comparator<Point2D> ATAN2_ORDER = new Atan2Order();
    public final Comparator<Point2D> DISTANCE_TO_ORDER = new DistanceToOrder();
 
    private final double x; // x coordinate
    private final double y; // y coordinate
 
    public Point2D(double x, double y)  {
        if (Double.isInfinite(x) || Double.isInfinite(y))
            throw new IllegalArgumentException("Coordinates must be finite");
        if (Double.isNaN(x) || Double.isNaN(y))
            throw new IllegalArgumentException("Coordinates cannot be NaN");
        if (x == 0.0)
            x = 0.0; // convert -0.0 to +0.0
        if (y == 0.0)
            y = 0.0; // convert -0.0 to +0.0
        this.x = x;
        this.y = y;
    }
 
    public double x() {
        return x;
    }
 
    public double y() {
        return y;
    }
 
    public double r()
    {
        return Math.sqrt(x * x + y * y);
    }
 
    public double theta()
    {
        return Math.atan2(y, x);
    }
 
    private double angleTo(Point2D that)
    {
        double dx = that.x - this.x;
        double dy = that.y - this.y;
        return Math.atan2(dy, dx);
    }
 
    public static int ccw(Point2D a, Point2D b, Point2D c)
    {
        double area2 = (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);
        if (area2 < 0)
            return -1;
        else if (area2 > 0)
            return +1;
        else
            return 0;
    }
 
    public static double area2(Point2D a, Point2D b, Point2D c)
    {
        return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);
    }
 
    public double distanceTo(Point2D that)
    {
        double dx = this.x - that.x;
        double dy = this.y - that.y;
        return Math.sqrt(dx * dx + dy * dy);
    }
 
    public double distanceSquaredTo(Point2D that)
    {
        double dx = this.x - that.x;
        double dy = this.y - that.y;
        return dx * dx + dy * dy;
    }
 
    public int compareTo(Point2D that)
    {
        if (this.y < that.y)
            return -1;
        if (this.y > that.y)
            return +1;
        if (this.x < that.x)
            return -1;
        if (this.x > that.x)
            return +1;
        return 0;
    }
 
    private static class XOrder implements Comparator<Point2D>
    {
        public int compare(Point2D p, Point2D q)
        {
            if (p.x < q.x)
                return -1;
            if (p.x > q.x)
                return +1;
            return 0;
        }
    }
 
    private static class YOrder implements Comparator<Point2D>
    {
        public int compare(Point2D p, Point2D q)
        {
            if (p.y < q.y)
                return -1;
            if (p.y > q.y)
                return +1;
            return 0;
        }
    }
 
    private static class ROrder implements Comparator<Point2D>
    {
        public int compare(Point2D p, Point2D q)
        {
            double delta = (p.x * p.x + p.y * p.y) - (q.x * q.x + q.y * q.y);
            if (delta < 0)
                return -1;
            if (delta > 0)
                return +1;
            return 0;
        }
    }
 
    private class Atan2Order implements Comparator<Point2D>
    {
        public int compare(Point2D q1, Point2D q2)
        {
            double angle1 = angleTo(q1);
            double angle2 = angleTo(q2);
            if (angle1 < angle2)
                return -1;
            else if (angle1 > angle2)
                return +1;
            else
                return 0;
        }
    }
 
    private class PolarOrder implements Comparator<Point2D>
    {
        public int compare(Point2D q1, Point2D q2)
        {
            double dx1 = q1.x - x;
            double dy1 = q1.y - y;
            double dx2 = q2.x - x;
            double dy2 = q2.y - y;
 
            if (dy1 >= 0 && dy2 < 0)
                return -1; // q1 above; q2 below
            else if (dy2 >= 0 && dy1 < 0)
                return +1; // q1 below; q2 above
            else if (dy1 == 0 && dy2 == 0)
            { // 3-collinear and horizontal
                if (dx1 >= 0 && dx2 < 0)
                    return -1;
                else if (dx2 >= 0 && dx1 < 0)
                    return +1;
                else
                    return 0;
            } else
                return -ccw(Point2D.this, q1, q2); // both above or below
        }
    }
 
    private class DistanceToOrder implements Comparator<Point2D>
    {
        public int compare(Point2D p, Point2D q)
        {
            double dist1 = distanceSquaredTo(p);
            double dist2 = distanceSquaredTo(q);
            if (dist1 < dist2)
                return -1;
            else if (dist1 > dist2)
                return +1;
            else
                return 0;
        }
    }
 
    public boolean equals(Object other)
    {
        if (other == this)
            return true;
        if (other == null)
            return false;
        if (other.getClass() != this.getClass())
            return false;
        Point2D that = (Point2D) other;
        return this.x == that.x && this.y == that.y;
    }
 
    public String toString()
    {
        return "(" + x + ", " + y + ")";
    }
 
    public int hashCode()
    {
        int hashX = ((Double) x).hashCode();
        int hashY = ((Double) y).hashCode();
        return 31 * hashX + hashY;
    }
 
}
 
public class GrahamScan
{
    private Stack<Point2D> hull = new Stack<Point2D>();
 
    public GrahamScan(Point2D[] pts)
    {
 
        // defensive copy
        int N = pts.length;
        Point2D[] points = new Point2D[N];
        for (int i = 0; i < N; i++)
            points[i] = pts[i];
        Arrays.sort(points);
 
        Arrays.sort(points, 1, N, points[0].POLAR_ORDER);
 
        hull.push(points[0]); // p[0] is first extreme point
        int k1;
        for (k1 = 1; k1 < N; k1++)
            if (!points[0].equals(points[k1]))
                break;
        if (k1 == N)
            return; // all points equal
 
        int k2;
        for (k2 = k1 + 1; k2 < N; k2++)
            if (Point2D.ccw(points[0], points[k1], points[k2]) != 0)
                break;
        hull.push(points[k2 - 1]); // points[k2-1] is second extreme point
 
        for (int i = k2; i < N; i++)
        {
            Point2D top = hull.pop();
            while (Point2D.ccw(hull.peek(), top, points[i]) <= 0)
            {
                top = hull.pop();
            }
            hull.push(top);
            hull.push(points[i]);
        }
 
        assert isConvex();
    }
 
    public Iterable<Point2D> hull()
    {
        Stack<Point2D> s = new Stack<Point2D>();
        for (Point2D p : hull)
            s.push(p);
        return s;
    }
 
    private boolean isConvex()
    {
        int N = hull.size();
        if (N <= 2)
            return true;
 
        Point2D[] points = new Point2D[N];
        int n = 0;
        for (Point2D p : hull())
        {
            points[n++] = p;
        }
 
        for (int i = 0; i < N; i++)
        {
            if (Point2D
                    .ccw(points[i], points[(i + 1) % N], points[(i + 2) % N]) <= 0)
            {
                return false;
            }
        }
        return true;
    }
 
    // test client
    public static void main(String[] args)
    {
        System.out.println("Graham Scan Test");
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number of points");
        int N = sc.nextInt();
 
        Point2D[] points = new Point2D[N];
        System.out.println("Enter the coordinates of each points: <x> <y>");
        for (int i = 0; i < N; i++)
        {
            int x = sc.nextInt();
            int y = sc.nextInt();
            points[i] = new Point2D(x, y);
        }
        GrahamScan graham = new GrahamScan(points);
        System.out.println("The convex hull consists of following points: ");
        for (Point2D p : graham.hull())
            System.out.println(p);
 
        sc.close();
    }
 
}
